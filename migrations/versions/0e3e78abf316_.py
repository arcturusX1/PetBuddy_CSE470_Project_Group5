from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '0e3e78abf316'
down_revision = '319313fe5b7b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=256),
               existing_nullable=False)
    # ### end Alembic commands ###

    # Create sequence if it doesn't exist
    op.execute('CREATE SEQUENCE IF NOT EXISTS users_id_seq')

    # Set the id column to use the sequence
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('id', 
                              existing_type=sa.Integer(), 
                              nullable=False, 
                              server_default=sa.text("nextval('users_id_seq'::regclass)"))

    # Ensure the sequence is owned by the id column
    op.execute('ALTER SEQUENCE users_id_seq OWNED BY users.id;')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=256),
               type_=sa.VARCHAR(length=80),
               existing_nullable=False)
    # ### end Alembic commands ###

    # Remove the default value from the id column
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('id', 
                              existing_type=sa.Integer(), 
                              nullable=False, 
                              server_default=None)

    # Drop the sequence if necessary
    op.execute('DROP SEQUENCE IF EXISTS users_id_seq')
